{"version":3,"sources":["logo.svg","components/Header.js","components/Banner.js","components/TileImg.js","components/Tile.js","components/Layout.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","state","headerClass","headerText","prevProps","this","props","lost","setState","won","score","setTimeout","className","hiScore","React","Component","Banner","jdenticon","config","replaceMode","TileImg","data-jdenticon-value","hash","width","height","Tile","id","alt","onClick","clickHandler","seed","renderTiles","tiles","array","i","length","j","Math","floor","random","shuffleArray","map","tile","key","url","clicked","Layout","Footer","src","logo","App","wins","losses","Date","now","event","tileArray","tIndx","findIndex","el","target","theTile","forEach","element","elem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9297636c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nclass Header extends React.Component {\n    state = {\n        headerClass: \"\",\n        headerText: \"Click a Tile to Begin\"\n    }\n\n    componentDidUpdate(prevProps) {\n        // console.log(this.props);\n        // console.log(prevProps);\n        if (this.props !== prevProps) {\n            if (this.props.lost) {\n                this.setState({ headerClass: \"fail\", headerText: \"Fail!\" });\n            }\n            else if (this.props.won) {\n                this.setState({ headerClass: \"nice\", headerText: \"Win!\"});\n            }\n            else if (this.props.score) {\n                this.setState({ headerClass: \"nice\", headerText: \"Nice!\" });\n            }\n        }\n        else if (this.state.headerClass) {\n            setTimeout(() => {\n                this.setState({ headerClass: \"\" });\n            }, 500);\n        }\n    }\n    render() {\n        return (\n            <div className=\"navbar sticky-top text-light bg-primary\">\n                <h1>Clicky Game</h1>\n                <h3 className={this.state.headerClass}>{this.state.headerText}</h3>\n                <h5>Score: {this.props.score} | High Score: {this.props.hiScore}</h5>\n            </div>\n        );\n    }\n}\n\nexport default Header","import React from \"react\";\n\nfunction Banner() {\n    return (\n        <div className=\"jumbotron text-center\">\n            <h1>Clicky Game</h1>\n            <p>Click the tiles, but don't click any tile more than once</p>\n        </div>\n    );\n}\n\nexport default Banner","import React from \"react\";\nimport jdenticon from 'jdenticon';\n\njdenticon.config = {replaceMode: \"observe\"} // \"observe\" required to dynamically re-render SVG icons on new props.hash.\n\nfunction TileImg(props) {\n    return (\n        <svg\n            data-jdenticon-value={props.hash}\n            width=\"150\" height=\"150\"\n        >\n            Need SVG support...\n        </svg>\n    );\n}\n\nexport default TileImg;","import React from \"react\";\nimport TileImg from \"./TileImg\";\n\nfunction Tile(props) {\n    // console.log(props.seed);\n    return (\n        // <img\n        //     src={props.url + \"?text=\" + props.id}\n        //     id={props.id} className=\"img-thumbnail m-3 tile\"\n        //     alt=\"tile\" onClick={props.clickHandler}\n        // />\n        <div\n            id={props.id}\n            className=\"img-thumbnail m-3 tile\"\n            alt=\"tile\"\n            onClick={props.clickHandler}\n        >\n            <TileImg hash={props.id + props.seed} />\n        </div>\n    );\n}\n\nexport default Tile","import React from \"react\";\nimport Tile from \"./Tile\";\n\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nfunction renderTiles(tiles, clickHandler, seed) {\n    // console.log(seed);\n    shuffleArray(tiles);\n    const tilesArray = tiles.map(tile => {\n        return (\n            <Tile key={tile.id} id={tile.id} url={tile.url} clicked={tile.clicked} clickHandler={clickHandler} seed={seed} />\n        );\n    });\n    return tilesArray;\n}\n\nfunction Layout(props) {\n    return (\n        <div className={\"container d-flex flex-wrap justify-content-center mb-5\" + (props.lost ? \" shaky\" : \"\")}>\n            {/* <p>This is the tile layout</p> */}\n            {renderTiles(props.tiles, props.clickHandler, props.seed)}\n        </div>\n    );\n}\n\nexport default Layout","import React from \"react\";\n\nfunction Footer(props) {\n    return (\n        <div className=\"bg-primary fixed-bottom d-flex justify-content-between pt-1 pr-2\">\n            <span>\n                <img src={props.logo} alt=\"logo\" height=\"36\" />\n                <strong>Clicky Game</strong>\n            </span>\n            <span>powered by React | coded by joshua-unseen</span>\n        </div>\n    );\n}\n\nexport default Footer","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport tiles from \"./tiles.json\"\nimport Header from './components/Header';\nimport Banner from './components/Banner';\nimport Layout from './components/Layout';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n  state = {\n    tiles,\n    score: 0,\n    hiScore: 0,\n    lost: false,\n    won: false,\n    wins: 0,\n    losses: 0,\n    seed : Date.now()\n  }\n\n  clickHandler = (event) => {\n    // console.log(\"+++ clickHandler +++\");\n    let score = this.state.score;\n    let hiScore = this.state.hiScore;\n    const tileArray = this.state.tiles;\n\n    // console.log(event.target);\n    // console.log(tileArray.length);\n    const tIndx = tileArray.findIndex(el => el.id == event.target.id);  // sloppy equivalence: HTML attributes are stored as strings, and I'm being lazy.\n    // console.log(tIndx);\n    const theTile = tileArray[tIndx]\n\n    if (theTile.clicked) {\n      // console.log(\"fail\");\n      tileArray.forEach(element => {\n        element.clicked = false;\n      });\n      this.setState({ tiles: tileArray, score: 0, lost: true, losses: this.state.losses + 1 });\n    }\n    else {\n      // console.log(\"nice\");\n      theTile.clicked = true;\n      score++;\n      if (hiScore <= score) {\n        hiScore = score;\n      }\n      // console.log(score);\n      if (score === tileArray.length) {\n        this.setState({ score, hiScore, won: true, wins: this.state.wins + 1, seed: Date.now() });\n        tileArray.forEach(elem => {elem.clicked = false});\n        this.setState({ tiles: tileArray, score: 0 });\n      }\n      else {\n        this.setState({ tiles: tileArray, score, hiScore, lost: false, won: false });\n      }\n    }\n    // console.log(\"+++ clickHandler +++\");\n  }\n\n\n\n  render() {\n    // console.log(this.state.tiles);\n    return (\n      <div className=\"App\">\n        <Header lost={this.state.lost} won={this.state.won} score={this.state.score} hiScore={this.state.hiScore} />\n        <Banner />\n        <Layout tiles={this.state.tiles} clickHandler={this.clickHandler} lost={this.state.lost} seed={this.state.seed} />\n        <Footer logo={logo} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}