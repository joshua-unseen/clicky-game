{"version":3,"sources":["components/Header.js","components/Banner.js","components/Tile.js","components/Layout.js","components/Footer.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Header","state","headerClass","headerText","prevProps","_this2","this","props","lost","setState","score","setTimeout","react_default","a","createElement","className","hiScore","React","Component","Banner","Tile","src","url","id","alt","onClick","clickHandler","renderTiles","tiles","array","i","length","j","Math","floor","random","_ref","shuffleArray","map","tile","components_Tile","key","clicked","Layout","Footer","logo","height","App","event","_this","tileArray","tIndx","findIndex","el","target","theTile","forEach","element","components_Header","components_Banner","components_Layout","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.f2a0298e.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n    state = {\n        headerClass: \"\",\n        headerText: \"Click a Tile to Begin\"\n    }\n\n    componentDidUpdate(prevProps) {\n        // console.log(this.props);\n        // console.log(prevProps);\n        if (this.props !== prevProps) {\n            if (this.props.lost) {\n                this.setState({ headerClass: \"fail\", headerText: \"Fail!\" });\n            }\n            else if (this.props.score) {\n                this.setState({ headerClass: \"nice\", headerText: \"Nice!\" });\n            }\n        }\n        else if (this.state.headerClass) {\n            setTimeout(() => {\n                this.setState({ headerClass: \"\" });\n            }, 500);\n        }\n    }\n    render() {\n        return (\n            <div className=\"navbar sticky-top text-light bg-primary\">\n                <h1>Clicky Game</h1>\n                <h3 className={this.state.headerClass}>{this.state.headerText}</h3>\n                <h5>Score: {this.props.score} | High Score: {this.props.hiScore}</h5>\n            </div>\n        );\n    }\n}\n\nexport default Header","import React from \"react\";\n\nfunction Banner() {\n    return (\n        <div className=\"jumbotron text-center\">\n            <h1>Clicky Game</h1>\n            <p>Click the tiles, but don't click any tile more than once</p>\n        </div>\n    );\n}\n\nexport default Banner","import React from \"react\";\n\nfunction Tile(props) {\n    return (\n        <img\n            src={props.url + \"?text=\" + props.id}\n            id={props.id} className=\"img-thumbnail m-3 tile\"\n            alt=\"tile\" onClick={props.clickHandler}\n        />\n    );\n}\n\nexport default Tile","import React from \"react\";\nimport Tile from \"./Tile\";\n\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nfunction renderTiles(tiles, clickHandler) {\n    shuffleArray(tiles);\n    const tilesArray = tiles.map(tile => {\n        return (\n            <Tile key={tile.id} id={tile.id} url={tile.url} clicked={tile.clicked} clickHandler={clickHandler} />\n        );\n    });\n    return tilesArray;\n}\n\nfunction Layout(props) {\n    return (\n        <div className={\"container d-flex flex-wrap justify-content-center mb-5\" + (props.lost ? \" shaky\" : \"\")}>\n            {/* <p>This is the tile layout</p> */}\n            {renderTiles(props.tiles, props.clickHandler)}\n        </div>\n    );\n}\n\nexport default Layout","import React from \"react\";\n\nfunction Footer(props) {\n    return (\n        <div className=\"bg-primary fixed-bottom d-flex justify-content-between pt-1 pr-2\">\n            <span>\n                <img src={props.logo} alt=\"logo\" height=\"36\" />\n                <strong>Clicky Game</strong>\n            </span>\n            <span>powered by React | coded by joshua-unseen</span>\n        </div>\n    );\n}\n\nexport default Footer","import React from 'react';\nimport logo from './logo.svg';\n// import './App.css';\nimport tiles from \"./tiles.json\"\nimport Header from './components/Header';\nimport Banner from './components/Banner';\nimport Layout from './components/Layout';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n  state = {\n    tiles,\n    score: 0,\n    hiScore: 0,\n    lost: false,\n  }\n\n  clickHandler = (event) => {\n    // console.log(\"+++ clickHandler +++\");\n    let score = this.state.score;\n    let hiScore = this.state.hiScore;\n    const tileArray = this.state.tiles;\n\n    // console.log(event.target);\n    const tIndx = tileArray.findIndex(el => el.id == event.target.id);  // sloppy equivalence: HTML attributes are stored as strings, and I'm being lazy.\n    // console.log(tIndx);\n    const theTile = tileArray[tIndx]\n\n    if (theTile.clicked) {\n      // console.log(\"fail\");\n      tileArray.forEach(element => {\n        element.clicked = false;\n      });\n      this.setState({tiles: tileArray, score: 0, lost: true, headerText: \"Fail!\"});\n    }\n    else {\n      // console.log(\"nice\");\n      theTile.clicked = true;\n      score++;\n      if (hiScore <= score) {\n        hiScore = score;\n      }\n      this.setState({tiles: tileArray, score, hiScore, lost: false, headerText: \"Nice!\"});\n    }\n    // console.log(\"+++ clickHandler +++\");\n  }\n\n  render() {\n    // console.log(this.state.tiles);\n    return (\n      <div className=\"App\">\n        <Header lost={this.state.lost} score={this.state.score} hiScore={this.state.hiScore} />\n        <Banner />\n        <Layout tiles={this.state.tiles} clickHandler={this.clickHandler} lost={this.state.lost} />\n        <Footer logo={logo} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}